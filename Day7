#案例1
import os
import time


def main():
    content = '北京欢迎你为你开天辟地…………'
    while True:
        os.system('cls')
        print(content)
        time.sleep(0.2)
        content=content[1:]+content[0]


if __name__ == '__main__':
    main()
#案例2
def main():
    persons = [True] * 30
    counter, index, number = 0, 0, 0
    while counter < 15:
        if persons[index]:
            number += 1
            if number == 9:
                persons[index] = False
                number=0
                counter+=1
        index+=1
        index%=30
    for person in persons:
        print('基' if person else '非', end='')


if __name__ == '__main__':
    main()
'''
#案例3
'''
yy='n'
list1=[1,2,7,8,9,10,12]
list2=[3,4,5,6,11]
while yy.upper() not in ['Y','YES']:  #判断是否结束
    x=eval(input('请输入月份：'))
    y=eval(input('请输入订票张数：'))
    z=eval(input('请输入机票原价：'))
    if x in list1:
        if y<=15:
            yh=0.05
        else:
            yh=0.15
    elif x in list2:
        if y<=20:
            yh=0.3
        elif y<=5:
            yh=0.1
        else:
            yh=0.2
    pay=y*z*(1-yh)
    print('票价优惠率：',yh)
    print('应付票款：',pay)
    yy=input('输入结束了吗？（y或yes结束，大小写无关，其他继续）：')
'''
#案例4
'''
import random

def generate_code(code_len=4):
    all_chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    last_pos=len(all_chars)-1
    code=''
    for i in range(code_len):
        index = random.randint(0, last_pos)
        code += all_chars[index]
    return code
generate_code(4)
'''
#案例5
'''
def is_leap_year(year):
    """
    判断指定的年份是不是闰年

    :param year: 年份
    :return: 闰年返回True平年返回False
    """
    return True if year%4==0&year%100!=0 else False

def which_day(year, month, date):
    """
    计算传入的日期是这一年的第几天

    :param year: 年
    :param month: 月
    :param date: 日
    :return: 第几天
    """
    days_of_month = [
        [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    ][is_leap_year(year)]
    total = 0
    for i in range(month-1):
        total+=days_of_month[i]
    return total+date


def main():
    print(which_day(1980, 11, 28))
    print(which_day(1981, 12, 31))
    print(which_day(2018, 1, 1))
    print(which_day(2016, 3, 1))


if __name__ == '__main__':
    main()
